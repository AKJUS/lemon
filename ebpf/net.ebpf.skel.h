/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __NET_EBPF_SKEL_H__
#define __NET_EBPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

#define BPF_SKEL_SUPPORTS_MAP_AUTO_ATTACH 1

struct net_ebpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *ring;
		struct bpf_map *bss;
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *set_tcp_rewriter_options_uprobe;
		struct bpf_program *tcp_rewriter;
	} progs;
	struct {
		struct bpf_link *set_tcp_rewriter_options_uprobe;
		struct bpf_link *tcp_rewriter;
	} links;
	struct net_ebpf__bss {
		struct tcp_rewriter_opts ropts;
		unsigned char exchange_buf[1024];
	} *bss;

#ifdef __cplusplus
	static inline struct net_ebpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct net_ebpf *open_and_load();
	static inline int load(struct net_ebpf *skel);
	static inline int attach(struct net_ebpf *skel);
	static inline void detach(struct net_ebpf *skel);
	static inline void destroy(struct net_ebpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
net_ebpf__destroy(struct net_ebpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
net_ebpf__create_skeleton(struct net_ebpf *obj);

static inline struct net_ebpf *
net_ebpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct net_ebpf *obj;
	int err;

	obj = (struct net_ebpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = net_ebpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	net_ebpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct net_ebpf *
net_ebpf__open(void)
{
	return net_ebpf__open_opts(NULL);
}

static inline int
net_ebpf__load(struct net_ebpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct net_ebpf *
net_ebpf__open_and_load(void)
{
	struct net_ebpf *obj;
	int err;

	obj = net_ebpf__open();
	if (!obj)
		return NULL;
	err = net_ebpf__load(obj);
	if (err) {
		net_ebpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
net_ebpf__attach(struct net_ebpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
net_ebpf__detach(struct net_ebpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *net_ebpf__elf_bytes(size_t *sz);

static inline int
net_ebpf__create_skeleton(struct net_ebpf *obj)
{
	struct bpf_object_skeleton *s;
	struct bpf_map_skeleton *map __attribute__((unused));
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "net_ebpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 3;
	s->map_skel_sz = 24;
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt,
			sizeof(*s->maps) > 24 ? sizeof(*s->maps) : 24);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	map = (struct bpf_map_skeleton *)((char *)s->maps + 0 * s->map_skel_sz);
	map->name = "ring";
	map->map = &obj->maps.ring;

	map = (struct bpf_map_skeleton *)((char *)s->maps + 1 * s->map_skel_sz);
	map->name = "net_ebpf.bss";
	map->map = &obj->maps.bss;
	map->mmaped = (void **)&obj->bss;

	map = (struct bpf_map_skeleton *)((char *)s->maps + 2 * s->map_skel_sz);
	map->name = "net_ebpf.rodata";
	map->map = &obj->maps.rodata;

	/* programs */
	s->prog_cnt = 2;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "set_tcp_rewriter_options_uprobe";
	s->progs[0].prog = &obj->progs.set_tcp_rewriter_options_uprobe;
	s->progs[0].link = &obj->links.set_tcp_rewriter_options_uprobe;

	s->progs[1].name = "tcp_rewriter";
	s->progs[1].prog = &obj->progs.tcp_rewriter;
	s->progs[1].link = &obj->links.tcp_rewriter;

	s->data = net_ebpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *net_ebpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xa0\x19\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x11\0\
\x01\0\xbf\x16\0\0\0\0\0\0\xb7\x01\0\0\x70\0\0\0\xbf\x63\0\0\0\0\0\0\x0f\x13\0\
\0\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xf8\xff\xff\xff\xb4\x02\0\0\x08\0\0\
\0\x85\0\0\0\x71\0\0\0\xb4\x01\0\0\x01\0\0\0\x79\xa2\xf8\xff\0\0\0\0\x55\x02\
\x01\0\0\0\0\0\xb4\x01\0\0\0\0\0\0\x18\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x73\x17\
\0\0\0\0\0\0\xb7\x01\0\0\x68\0\0\0\xbf\x63\0\0\0\0\0\0\x0f\x13\0\0\0\0\0\0\xbf\
\xa1\0\0\0\0\0\0\x07\x01\0\0\xf8\xff\xff\xff\xb4\x02\0\0\x08\0\0\0\x85\0\0\0\
\x71\0\0\0\x79\xa1\xf8\xff\0\0\0\0\x63\x17\x04\0\0\0\0\0\xb7\x01\0\0\x60\0\0\0\
\x0f\x16\0\0\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xf8\xff\xff\xff\xb4\x02\0\
\0\x08\0\0\0\xbf\x63\0\0\0\0\0\0\x85\0\0\0\x71\0\0\0\x79\xa1\xf8\xff\0\0\0\0\
\xdc\x01\0\0\x10\0\0\0\x6b\x17\x08\0\0\0\0\0\xb4\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\
\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x71\x22\0\0\0\0\0\0\x56\x02\x29\0\x01\0\
\0\0\x61\x12\x04\0\0\0\0\0\x61\x13\0\0\0\0\0\0\xbf\x31\0\0\0\0\0\0\x07\x01\0\0\
\x0e\0\0\0\x2d\x21\x24\0\0\0\0\0\x69\x34\x0c\0\0\0\0\0\x56\x04\x22\0\x08\0\0\0\
\xbf\x34\0\0\0\0\0\0\x07\x04\0\0\x22\0\0\0\x2d\x24\x1f\0\0\0\0\0\x71\x15\0\0\0\
\0\0\0\x54\x05\0\0\xf0\0\0\0\x56\x05\x1c\0\x40\0\0\0\x71\x15\0\0\0\0\0\0\x64\
\x05\0\0\x02\0\0\0\x54\x05\0\0\x3c\0\0\0\xa6\x05\x18\0\x14\0\0\0\xbf\x10\0\0\0\
\0\0\0\x0f\x50\0\0\0\0\0\0\x2d\x20\x15\0\0\0\0\0\x71\x15\x09\0\0\0\0\0\x56\x05\
\x13\0\x06\0\0\0\x07\x03\0\0\x36\0\0\0\x2d\x23\x11\0\0\0\0\0\x61\x11\x10\0\0\0\
\0\0\x7b\x1a\xe0\xff\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\x12\x04\0\
\0\0\0\0\x7b\x2a\xe8\xff\0\0\0\0\x69\x42\x02\0\0\0\0\0\x7b\x2a\xf0\xff\0\0\0\0\
\x69\x11\x08\0\0\0\0\0\x7b\x1a\xf8\xff\0\0\0\0\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\
\xe0\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb4\x02\0\0\x0d\0\0\0\xb4\
\x04\0\0\x20\0\0\0\x85\0\0\0\xb1\0\0\0\xb4\0\0\0\x02\0\0\0\x95\0\0\0\0\0\0\0\
\x25\x75\x20\x25\x75\x20\x25\x75\x20\x25\x75\x0a\0\x47\x50\x4c\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x80\x07\0\0\
\x80\x07\0\0\x86\x06\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\
\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x1b\0\0\0\x05\0\
\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\0\0\0\0\0\0\0\
\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x40\0\0\0\0\0\0\0\x02\0\0\x04\x10\0\0\0\x19\0\
\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\x05\0\0\0\x40\0\0\0\x2a\0\0\0\0\0\0\x0e\x07\0\
\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0a\0\0\0\x2f\0\0\0\x15\0\0\x04\xa8\0\0\0\x37\
\0\0\0\x0b\0\0\0\0\0\0\0\x3b\0\0\0\x0b\0\0\0\x40\0\0\0\x3f\0\0\0\x0b\0\0\0\x80\
\0\0\0\x43\0\0\0\x0b\0\0\0\xc0\0\0\0\x47\0\0\0\x0b\0\0\0\0\x01\0\0\x4a\0\0\0\
\x0b\0\0\0\x40\x01\0\0\x4d\0\0\0\x0b\0\0\0\x80\x01\0\0\x51\0\0\0\x0b\0\0\0\xc0\
\x01\0\0\x55\0\0\0\x0b\0\0\0\0\x02\0\0\x58\0\0\0\x0b\0\0\0\x40\x02\0\0\x5b\0\0\
\0\x0b\0\0\0\x80\x02\0\0\x5e\0\0\0\x0b\0\0\0\xc0\x02\0\0\x61\0\0\0\x0b\0\0\0\0\
\x03\0\0\x64\0\0\0\x0b\0\0\0\x40\x03\0\0\x67\0\0\0\x0b\0\0\0\x80\x03\0\0\x6a\0\
\0\0\x0b\0\0\0\xc0\x03\0\0\x72\0\0\0\x0b\0\0\0\0\x04\0\0\0\0\0\0\x0c\0\0\0\x40\
\x04\0\0\x75\0\0\0\x0b\0\0\0\x80\x04\0\0\x7b\0\0\0\x0b\0\0\0\xc0\x04\0\0\0\0\0\
\0\x14\0\0\0\0\x05\0\0\x7e\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x03\0\0\
\x05\x08\0\0\0\x8c\0\0\0\x0d\0\0\0\0\0\0\0\x8f\0\0\0\x10\0\0\0\0\0\0\0\x93\0\0\
\0\x13\0\0\0\0\0\0\0\x9b\0\0\0\0\0\0\x08\x0e\0\0\0\x9f\0\0\0\0\0\0\x08\x0f\0\0\
\0\xa5\0\0\0\0\0\0\x01\x02\0\0\0\x10\0\0\0\xb4\0\0\0\0\0\0\x08\x11\0\0\0\xb8\0\
\0\0\0\0\0\x08\x12\0\0\0\xbe\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\x93\0\0\0\x03\
\0\0\x84\x08\0\0\0\x8c\0\0\0\x10\0\0\0\0\0\0\x10\xd1\0\0\0\x10\0\0\0\x10\0\0\
\x02\xd4\0\0\0\x10\0\0\0\x12\0\0\x01\0\0\0\0\x03\0\0\x05\x08\0\0\0\xd8\0\0\0\
\x0d\0\0\0\0\0\0\0\xdb\0\0\0\x10\0\0\0\0\0\0\0\xdf\0\0\0\x15\0\0\0\0\0\0\0\xdf\
\0\0\0\x0a\0\0\x84\x08\0\0\0\xd8\0\0\0\x10\0\0\0\0\0\0\x10\xe7\0\0\0\x10\0\0\0\
\x10\0\0\x01\xeb\0\0\0\x10\0\0\0\x11\0\0\x01\xf3\0\0\0\x10\0\0\0\x12\0\0\x01\
\xf7\0\0\0\x10\0\0\0\x20\0\0\x08\x19\0\0\0\x10\0\0\0\x30\0\0\x04\xfe\0\0\0\x10\
\0\0\0\x38\0\0\x01\x06\x01\0\0\x10\0\0\0\x39\0\0\x01\x09\x01\0\0\x10\0\0\0\x3a\
\0\0\x01\x10\x01\0\0\x10\0\0\0\x3c\0\0\x04\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x18\
\x01\0\0\x09\0\0\0\x1c\x01\0\0\x01\0\0\x0c\x16\0\0\0\0\0\0\0\0\0\0\x02\x19\0\0\
\0\xac\x02\0\0\x06\0\0\x04\x18\0\0\0\xb3\x02\0\0\x1a\0\0\0\0\0\0\0\xb8\x02\0\0\
\x1a\0\0\0\x20\0\0\0\xc1\x02\0\0\x1a\0\0\0\x40\0\0\0\xcb\x02\0\0\x1a\0\0\0\x60\
\0\0\0\xdb\x02\0\0\x1a\0\0\0\x80\0\0\0\xea\x02\0\0\x1a\0\0\0\xa0\0\0\0\xf9\x02\
\0\0\0\0\0\x08\x1b\0\0\0\xff\x02\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x01\
\0\0\x0d\x02\0\0\0\x18\x01\0\0\x18\0\0\0\x0c\x03\0\0\x01\0\0\x0c\x1c\0\0\0\xc0\
\x03\0\0\x03\0\0\x04\x0e\0\0\0\xc7\x03\0\0\x20\0\0\0\0\0\0\0\xce\x03\0\0\x20\0\
\0\0\x30\0\0\0\xd7\x03\0\0\x21\0\0\0\x60\0\0\0\xdf\x03\0\0\0\0\0\x01\x01\0\0\0\
\x08\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x1f\0\0\0\x04\0\0\0\x06\0\0\0\xed\x03\0\0\
\0\0\0\x08\x0e\0\0\0\x4a\x04\0\0\x0a\0\0\x84\x14\0\0\0\x50\x04\0\0\x23\0\0\0\0\
\0\0\x04\x54\x04\0\0\x23\0\0\0\x04\0\0\x04\x5c\x04\0\0\x23\0\0\0\x08\0\0\0\x60\
\x04\0\0\x21\0\0\0\x10\0\0\0\x68\x04\0\0\x21\0\0\0\x20\0\0\0\x6b\x04\0\0\x21\0\
\0\0\x30\0\0\0\x74\x04\0\0\x23\0\0\0\x40\0\0\0\x78\x04\0\0\x23\0\0\0\x48\0\0\0\
\x81\x04\0\0\x24\0\0\0\x50\0\0\0\0\0\0\0\x25\0\0\0\x60\0\0\0\x87\x04\0\0\0\0\0\
\x08\x1f\0\0\0\x8c\x04\0\0\0\0\0\x08\x0e\0\0\0\0\0\0\0\x02\0\0\x05\x08\0\0\0\0\
\0\0\0\x26\0\0\0\0\0\0\0\x94\x04\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\x04\x08\
\0\0\0\x9a\x04\0\0\x27\0\0\0\0\0\0\0\xa0\x04\0\0\x27\0\0\0\x20\0\0\0\xa6\x04\0\
\0\0\0\0\x08\x1a\0\0\0\0\0\0\0\x02\0\0\x04\x08\0\0\0\x9a\x04\0\0\x27\0\0\0\0\0\
\0\0\xa0\x04\0\0\x27\0\0\0\x20\0\0\0\xa7\x05\0\0\x11\0\0\x84\x14\0\0\0\xae\x05\
\0\0\x21\0\0\0\0\0\0\0\xb5\x05\0\0\x21\0\0\0\x10\0\0\0\xba\x05\0\0\x27\0\0\0\
\x20\0\0\0\xbe\x05\0\0\x27\0\0\0\x40\0\0\0\xc6\x05\0\0\x0e\0\0\0\x60\0\0\x04\
\xcb\x05\0\0\x0e\0\0\0\x64\0\0\x04\xd0\x05\0\0\x0e\0\0\0\x68\0\0\x01\xd4\x05\0\
\0\x0e\0\0\0\x69\0\0\x01\xd8\x05\0\0\x0e\0\0\0\x6a\0\0\x01\xdc\x05\0\0\x0e\0\0\
\0\x6b\0\0\x01\xe0\x05\0\0\x0e\0\0\0\x6c\0\0\x01\xe4\x05\0\0\x0e\0\0\0\x6d\0\0\
\x01\xe8\x05\0\0\x0e\0\0\0\x6e\0\0\x01\xec\x05\0\0\x0e\0\0\0\x6f\0\0\x01\xf0\
\x05\0\0\x21\0\0\0\x70\0\0\0\x81\x04\0\0\x24\0\0\0\x80\0\0\0\xf7\x05\0\0\x21\0\
\0\0\x90\0\0\0\x01\x06\0\0\x03\0\0\x04\x0c\0\0\0\x13\x06\0\0\x2b\0\0\0\0\0\0\0\
\x1b\x06\0\0\x1b\0\0\0\x20\0\0\0\x27\x06\0\0\x0f\0\0\0\x40\0\0\0\x30\x06\0\0\0\
\0\0\x01\x01\0\0\0\x08\0\0\x04\x36\x06\0\0\0\0\0\x0e\x2a\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\x0a\x2e\0\0\0\x3c\x06\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\
\0\x03\0\0\0\0\x2d\0\0\0\x04\0\0\0\x0d\0\0\0\x41\x06\0\0\0\0\0\x0e\x2f\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x2e\0\0\0\x04\0\0\0\x04\0\0\0\x55\x06\0\0\0\0\
\0\x0e\x31\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x1f\0\0\0\x04\0\0\0\0\x04\
\0\0\x5e\x06\0\0\0\0\0\x0e\x33\0\0\0\x01\0\0\0\x6b\x06\0\0\x02\0\0\x0f\0\0\0\0\
\x2c\0\0\0\0\0\0\0\x0c\0\0\0\x34\0\0\0\0\0\0\0\0\x04\0\0\x70\x06\0\0\x01\0\0\
\x0f\0\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\x76\x06\0\0\x01\0\0\x0f\0\0\0\0\x30\0\
\0\0\0\0\0\0\x0d\0\0\0\x7e\x06\0\0\x01\0\0\x0f\0\0\0\0\x32\0\0\0\0\0\0\0\x04\0\
\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\
\x59\x50\x45\x5f\x5f\0\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\
\x65\x73\0\x72\x69\x6e\x67\0\x70\x74\x5f\x72\x65\x67\x73\0\x72\x31\x35\0\x72\
\x31\x34\0\x72\x31\x33\0\x72\x31\x32\0\x62\x70\0\x62\x78\0\x72\x31\x31\0\x72\
\x31\x30\0\x72\x39\0\x72\x38\0\x61\x78\0\x63\x78\0\x64\x78\0\x73\x69\0\x64\x69\
\0\x6f\x72\x69\x67\x5f\x61\x78\0\x69\x70\0\x66\x6c\x61\x67\x73\0\x73\x70\0\x75\
\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\0\x63\x73\0\x63\x73\x78\0\x66\
\x72\x65\x64\x5f\x63\x73\0\x75\x31\x36\0\x5f\x5f\x75\x31\x36\0\x75\x6e\x73\x69\
\x67\x6e\x65\x64\x20\x73\x68\x6f\x72\x74\0\x75\x36\x34\0\x5f\x5f\x75\x36\x34\0\
\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x73\
\x6c\0\x77\x66\x65\0\x73\x73\0\x73\x73\x78\0\x66\x72\x65\x64\x5f\x73\x73\0\x73\
\x74\x69\0\x73\x77\x65\x76\x65\x6e\x74\0\x6e\x6d\x69\0\x76\x65\x63\x74\x6f\x72\
\0\x65\x6e\x63\x6c\x61\x76\x65\0\x6c\x6d\0\x6e\x65\x73\x74\x65\x64\0\x69\x6e\
\x73\x6e\x6c\x65\x6e\0\x63\x74\x78\0\x73\x65\x74\x5f\x74\x63\x70\x5f\x72\x65\
\x77\x72\x69\x74\x65\x72\x5f\x6f\x70\x74\x69\x6f\x6e\x73\x5f\x75\x70\x72\x6f\
\x62\x65\0\x75\x70\x72\x6f\x62\x65\x2f\x2f\x70\x72\x6f\x63\x2f\x73\x65\x6c\x66\
\x2f\x65\x78\x65\x3a\x73\x65\x74\x5f\x74\x63\x70\x5f\x72\x65\x77\x72\x69\x74\
\x65\x72\x5f\x6f\x70\x74\x69\x6f\x6e\x73\0\x2f\x68\x6f\x6d\x65\x2f\x61\x6e\x64\
\x72\x65\x61\x2f\x70\x72\x6f\x6a\x65\x63\x74\x73\x2f\x6c\x65\x6d\x6f\x6e\x2f\
\x65\x62\x70\x66\x2f\x6e\x65\x74\x2e\x65\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\
\x73\x65\x74\x5f\x74\x63\x70\x5f\x72\x65\x77\x72\x69\x74\x65\x72\x5f\x6f\x70\
\x74\x69\x6f\x6e\x73\x5f\x75\x70\x72\x6f\x62\x65\x28\x73\x74\x72\x75\x63\x74\
\x20\x70\x74\x5f\x72\x65\x67\x73\x20\x2a\x63\x74\x78\x29\x20\x7b\0\x30\x3a\x31\
\x34\0\x20\x20\x20\x20\x20\x20\x20\x20\x72\x6f\x70\x74\x73\x2e\x65\x6e\x61\x62\
\x6c\x65\x64\x20\x3d\x20\x28\x62\x6f\x6f\x6c\x29\x28\x50\x54\x5f\x52\x45\x47\
\x53\x5f\x50\x41\x52\x4d\x31\x5f\x43\x4f\x52\x45\x28\x63\x74\x78\x29\x29\x3b\0\
\x30\x3a\x31\x33\0\x20\x20\x20\x20\x20\x20\x20\x20\x72\x6f\x70\x74\x73\x2e\x64\
\x73\x74\x5f\x61\x64\x64\x72\x65\x73\x73\x20\x3d\x20\x28\x75\x6e\x73\x69\x67\
\x6e\x65\x64\x20\x69\x6e\x74\x29\x28\x50\x54\x5f\x52\x45\x47\x53\x5f\x50\x41\
\x52\x4d\x32\x5f\x43\x4f\x52\x45\x28\x63\x74\x78\x29\x29\x3b\0\x30\x3a\x31\x32\
\0\x20\x20\x20\x20\x20\x20\x20\x20\x72\x6f\x70\x74\x73\x2e\x64\x73\x74\x5f\x70\
\x6f\x72\x74\x20\x3d\x20\x5f\x5f\x62\x70\x66\x5f\x68\x74\x6f\x6e\x73\x28\x50\
\x54\x5f\x52\x45\x47\x53\x5f\x50\x41\x52\x4d\x33\x5f\x43\x4f\x52\x45\x28\x63\
\x74\x78\x29\x29\x3b\0\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x30\x3b\0\
\x78\x64\x70\x5f\x6d\x64\0\x64\x61\x74\x61\0\x64\x61\x74\x61\x5f\x65\x6e\x64\0\
\x64\x61\x74\x61\x5f\x6d\x65\x74\x61\0\x69\x6e\x67\x72\x65\x73\x73\x5f\x69\x66\
\x69\x6e\x64\x65\x78\0\x72\x78\x5f\x71\x75\x65\x75\x65\x5f\x69\x6e\x64\x65\x78\
\0\x65\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x5f\x5f\x75\x33\
\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x74\x63\x70\x5f\x72\
\x65\x77\x72\x69\x74\x65\x72\0\x78\x64\x70\0\x20\x20\x20\x20\x69\x66\x28\x21\
\x72\x6f\x70\x74\x73\x2e\x65\x6e\x61\x62\x6c\x65\x64\x29\0\x30\x3a\x31\0\x20\
\x20\x20\x20\x76\x6f\x69\x64\x20\x2a\x64\x61\x74\x61\x5f\x65\x6e\x64\x20\x3d\
\x20\x28\x76\x6f\x69\x64\x20\x2a\x29\x28\x6c\x6f\x6e\x67\x29\x63\x74\x78\x2d\
\x3e\x64\x61\x74\x61\x5f\x65\x6e\x64\x3b\0\x30\x3a\x30\0\x20\x20\x20\x20\x76\
\x6f\x69\x64\x20\x2a\x64\x61\x74\x61\x20\x3d\x20\x28\x76\x6f\x69\x64\x20\x2a\
\x29\x28\x6c\x6f\x6e\x67\x29\x63\x74\x78\x2d\x3e\x64\x61\x74\x61\x3b\0\x20\x20\
\x20\x20\x69\x66\x20\x28\x64\x61\x74\x61\x20\x2b\x20\x73\x69\x7a\x65\x6f\x66\
\x28\x2a\x65\x74\x68\x29\x20\x3e\x20\x64\x61\x74\x61\x5f\x65\x6e\x64\x29\0\x65\
\x74\x68\x68\x64\x72\0\x68\x5f\x64\x65\x73\x74\0\x68\x5f\x73\x6f\x75\x72\x63\
\x65\0\x68\x5f\x70\x72\x6f\x74\x6f\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x63\
\x68\x61\x72\0\x5f\x5f\x62\x65\x31\x36\0\x30\x3a\x32\0\x20\x20\x20\x20\x69\x66\
\x20\x28\x62\x70\x66\x5f\x68\x74\x6f\x6e\x73\x28\x65\x74\x68\x2d\x3e\x68\x5f\
\x70\x72\x6f\x74\x6f\x29\x20\x21\x3d\x20\x45\x54\x48\x5f\x50\x5f\x49\x50\x29\0\
\x20\x20\x20\x20\x69\x66\x20\x28\x28\x76\x6f\x69\x64\x20\x2a\x29\x28\x69\x70\
\x20\x2b\x20\x31\x29\x20\x3e\x20\x64\x61\x74\x61\x5f\x65\x6e\x64\x29\0\x69\x70\
\x68\x64\x72\0\x69\x68\x6c\0\x76\x65\x72\x73\x69\x6f\x6e\0\x74\x6f\x73\0\x74\
\x6f\x74\x5f\x6c\x65\x6e\0\x69\x64\0\x66\x72\x61\x67\x5f\x6f\x66\x66\0\x74\x74\
\x6c\0\x70\x72\x6f\x74\x6f\x63\x6f\x6c\0\x63\x68\x65\x63\x6b\0\x5f\x5f\x75\x38\
\0\x5f\x5f\x73\x75\x6d\x31\x36\0\x61\x64\x64\x72\x73\0\x73\x61\x64\x64\x72\0\
\x64\x61\x64\x64\x72\0\x5f\x5f\x62\x65\x33\x32\0\x20\x20\x20\x20\x69\x66\x28\
\x69\x70\x2d\x3e\x76\x65\x72\x73\x69\x6f\x6e\x20\x21\x3d\x20\x34\x29\0\x20\x20\
\x20\x20\x20\x69\x6e\x74\x20\x69\x70\x5f\x68\x64\x72\x5f\x6c\x65\x6e\x20\x3d\
\x20\x69\x70\x2d\x3e\x69\x68\x6c\x20\x2a\x20\x34\x3b\0\x20\x20\x20\x20\x20\x69\
\x66\x20\x28\x69\x70\x5f\x68\x64\x72\x5f\x6c\x65\x6e\x20\x3c\x20\x73\x69\x7a\
\x65\x6f\x66\x28\x73\x74\x72\x75\x63\x74\x20\x69\x70\x68\x64\x72\x29\x29\0\x30\
\x3a\x37\0\x20\x20\x20\x20\x69\x66\x20\x28\x69\x70\x2d\x3e\x70\x72\x6f\x74\x6f\
\x63\x6f\x6c\x20\x21\x3d\x20\x49\x50\x50\x52\x4f\x54\x4f\x5f\x54\x43\x50\x29\0\
\x30\x3a\x39\x3a\x30\x3a\x31\0\x20\x20\x20\x20\x62\x70\x66\x5f\x70\x72\x69\x6e\
\x74\x6b\x28\x22\x25\x75\x20\x25\x75\x20\x25\x75\x20\x25\x75\x5c\x6e\x22\x2c\
\x70\x6b\x74\x2e\x69\x70\x2d\x3e\x64\x61\x64\x64\x72\x2c\x20\x72\x6f\x70\x74\
\x73\x2e\x64\x73\x74\x5f\x61\x64\x64\x72\x65\x73\x73\x2c\x20\x70\x6b\x74\x2e\
\x74\x63\x70\x2d\x3e\x64\x65\x73\x74\x2c\x20\x72\x6f\x70\x74\x73\x2e\x64\x73\
\x74\x5f\x70\x6f\x72\x74\x29\x3b\0\x74\x63\x70\x68\x64\x72\0\x73\x6f\x75\x72\
\x63\x65\0\x64\x65\x73\x74\0\x73\x65\x71\0\x61\x63\x6b\x5f\x73\x65\x71\0\x72\
\x65\x73\x31\0\x64\x6f\x66\x66\0\x66\x69\x6e\0\x73\x79\x6e\0\x72\x73\x74\0\x70\
\x73\x68\0\x61\x63\x6b\0\x75\x72\x67\0\x65\x63\x65\0\x63\x77\x72\0\x77\x69\x6e\
\x64\x6f\x77\0\x75\x72\x67\x5f\x70\x74\x72\0\x7d\0\x74\x63\x70\x5f\x72\x65\x77\
\x72\x69\x74\x65\x72\x5f\x6f\x70\x74\x73\0\x65\x6e\x61\x62\x6c\x65\x64\0\x64\
\x73\x74\x5f\x61\x64\x64\x72\x65\x73\x73\0\x64\x73\x74\x5f\x70\x6f\x72\x74\0\
\x5f\x42\x6f\x6f\x6c\0\x72\x6f\x70\x74\x73\0\x63\x68\x61\x72\0\x74\x63\x70\x5f\
\x72\x65\x77\x72\x69\x74\x65\x72\x2e\x5f\x5f\x5f\x66\x6d\x74\0\x5f\x6c\x69\x63\
\x65\x6e\x73\x65\0\x65\x78\x63\x68\x61\x6e\x67\x65\x5f\x62\x75\x66\0\x2e\x62\
\x73\x73\0\x2e\x6d\x61\x70\x73\0\x2e\x72\x6f\x64\x61\x74\x61\0\x6c\x69\x63\x65\
\x6e\x73\x65\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x24\0\0\0\x24\0\0\0\x14\x02\
\0\0\x38\x02\0\0\xc4\0\0\0\x08\0\0\0\x3c\x01\0\0\x01\0\0\0\0\0\0\0\x17\0\0\0\
\x19\x03\0\0\x01\0\0\0\0\0\0\0\x1d\0\0\0\x10\0\0\0\x3c\x01\0\0\x0d\0\0\0\0\0\0\
\0\x6b\x01\0\0\x97\x01\0\0\0\x9c\0\0\x30\0\0\0\x6b\x01\0\0\xd7\x01\0\0\x20\xa8\
\0\0\x48\0\0\0\x6b\x01\0\0\xd7\x01\0\0\x20\xa8\0\0\x50\0\0\0\x6b\x01\0\0\xd7\
\x01\0\0\x19\xa8\0\0\x60\0\0\0\x6b\x01\0\0\xd7\x01\0\0\x17\xa8\0\0\xa0\0\0\0\
\x6b\x01\0\0\x15\x02\0\0\x2c\xac\0\0\xb0\0\0\0\x6b\x01\0\0\x15\x02\0\0\x2c\xac\
\0\0\xb8\0\0\0\x6b\x01\0\0\x15\x02\0\0\x1b\xac\0\0\xe0\0\0\0\x6b\x01\0\0\x5f\
\x02\0\0\x1a\xb0\0\0\xf8\0\0\0\x6b\x01\0\0\x5f\x02\0\0\x1a\xb0\0\0\0\x01\0\0\
\x6b\x01\0\0\x5f\x02\0\0\x1a\xb0\0\0\x08\x01\0\0\x6b\x01\0\0\x5f\x02\0\0\x18\
\xb0\0\0\x10\x01\0\0\x6b\x01\0\0\x9e\x02\0\0\x05\xc8\0\0\x19\x03\0\0\x13\0\0\0\
\0\0\0\0\x6b\x01\0\0\x1d\x03\0\0\x0f\0\x02\0\x18\0\0\0\x6b\x01\0\0\x1d\x03\0\0\
\x08\0\x02\0\x20\0\0\0\x6b\x01\0\0\x38\x03\0\0\x29\xdc\0\0\x28\0\0\0\x6b\x01\0\
\0\x6e\x03\0\0\x25\xe0\0\0\x30\0\0\0\x6b\x01\0\0\x98\x03\0\0\x0e\xf0\0\0\x40\0\
\0\0\x6b\x01\0\0\x98\x03\0\0\x1d\xf0\0\0\x48\0\0\0\x6b\x01\0\0\xf8\x03\0\0\x09\
\x08\x01\0\x50\0\0\0\x6b\x01\0\0\xf8\x03\0\0\x21\x08\x01\0\x58\0\0\0\x6b\x01\0\
\0\x25\x04\0\0\x15\x1c\x01\0\x68\0\0\0\x6b\x01\0\0\x25\x04\0\0\x1a\x1c\x01\0\
\x70\0\0\0\x6b\x01\0\0\xad\x04\0\0\x0c\x34\x01\0\x78\0\0\0\x6b\x01\0\0\xad\x04\
\0\0\x14\x34\x01\0\x88\0\0\0\x6b\x01\0\0\xc6\x04\0\0\x1b\x44\x01\0\x90\0\0\0\
\x6b\x01\0\0\xc6\x04\0\0\x1f\x44\x01\0\xa0\0\0\0\x6b\x01\0\0\xe9\x04\0\0\x15\
\x48\x01\0\xc0\0\0\0\x6b\x01\0\0\x19\x05\0\0\x0d\x60\x01\0\xc8\0\0\0\x6b\x01\0\
\0\x19\x05\0\0\x16\x60\x01\0\xe0\0\0\0\x6b\x01\0\0\x46\x05\0\0\x05\x20\x02\0\
\x68\x01\0\0\x6b\x01\0\0\xff\x05\0\0\x01\xb0\x02\0\x10\0\0\0\x3c\x01\0\0\x03\0\
\0\0\x08\0\0\0\x0a\0\0\0\xd2\x01\0\0\0\0\0\0\x78\0\0\0\x0a\0\0\0\x10\x02\0\0\0\
\0\0\0\xc0\0\0\0\x0a\0\0\0\x5a\x02\0\0\0\0\0\0\x19\x03\0\0\x08\0\0\0\x20\0\0\0\
\x19\0\0\0\x34\x03\0\0\0\0\0\0\x28\0\0\0\x19\0\0\0\x6a\x03\0\0\0\0\0\0\x48\0\0\
\0\x1e\0\0\0\xf4\x03\0\0\0\0\0\0\x70\0\0\0\x22\0\0\0\x34\x03\0\0\0\0\0\0\x88\0\
\0\0\x22\0\0\0\x6a\x03\0\0\0\0\0\0\xc0\0\0\0\x22\0\0\0\x15\x05\0\0\0\0\0\0\xe0\
\0\0\0\x22\0\0\0\x3e\x05\0\0\0\0\0\0\x10\x01\0\0\x29\0\0\0\x34\x03\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x14\0\0\0\x01\0\x08\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\0\0\0\0\x03\0\x08\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xaa\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x20\
\x01\0\0\0\0\0\0\x28\0\0\0\x11\0\x07\0\0\0\0\0\0\0\0\0\x0c\0\0\0\0\0\0\0\x6c\0\
\0\0\x12\0\x05\0\0\0\0\0\0\0\0\0\x78\x01\0\0\0\0\0\0\xa1\0\0\0\x11\0\x09\0\0\0\
\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x94\0\0\0\x11\0\x07\0\x0c\0\0\0\0\0\0\0\0\x04\0\
\0\0\0\0\0\x81\0\0\0\x11\0\x0a\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x60\0\0\0\0\
\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x06\0\0\0\xf0\0\0\0\0\0\0\
\0\x01\0\0\0\x06\0\0\0\x40\x01\0\0\0\0\0\0\x01\0\0\0\x04\0\0\0\x3c\x07\0\0\0\0\
\0\0\x04\0\0\0\x06\0\0\0\x48\x07\0\0\0\0\0\0\x04\0\0\0\x09\0\0\0\x60\x07\0\0\0\
\0\0\0\x04\0\0\0\x0a\0\0\0\x78\x07\0\0\0\0\0\0\x03\0\0\0\x04\0\0\0\x90\x07\0\0\
\0\0\0\0\x04\0\0\0\x08\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x3c\0\0\0\0\
\0\0\0\x04\0\0\0\x02\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x60\0\0\0\0\0\
\0\0\x04\0\0\0\x01\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x80\0\0\0\0\0\0\
\0\x04\0\0\0\x01\0\0\0\x90\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xa0\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\xb0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xc0\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\xd0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xe0\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\xf0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\0\x01\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\x10\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x28\x01\0\0\0\0\0\
\0\x04\0\0\0\x02\0\0\0\x38\x01\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x48\x01\0\0\0\0\
\0\0\x04\0\0\0\x02\0\0\0\x58\x01\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x68\x01\0\0\0\
\0\0\0\x04\0\0\0\x02\0\0\0\x78\x01\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x88\x01\0\0\
\0\0\0\0\x04\0\0\0\x02\0\0\0\x98\x01\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xa8\x01\0\
\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xb8\x01\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xc8\x01\
\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xd8\x01\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xe8\
\x01\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xf8\x01\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\
\x08\x02\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x18\x02\0\0\0\0\0\0\x04\0\0\0\x02\0\0\
\0\x28\x02\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x38\x02\0\0\0\0\0\0\x04\0\0\0\x02\0\
\0\0\x48\x02\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x64\x02\0\0\0\0\0\0\x04\0\0\0\x01\
\0\0\0\x74\x02\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x84\x02\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x9c\x02\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xac\x02\0\0\0\0\0\0\x04\0\0\
\0\x02\0\0\0\xbc\x02\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xcc\x02\0\0\0\0\0\0\x04\0\
\0\0\x02\0\0\0\xdc\x02\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xec\x02\0\0\0\0\0\0\x04\
\0\0\0\x02\0\0\0\xfc\x02\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x0c\x03\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\x0f\x11\x10\x04\x12\x13\x14\0\x2e\x74\x65\x78\x74\0\x2e\
\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x74\x63\x70\x5f\x72\x65\x77\x72\
\x69\x74\x65\x72\x2e\x5f\x5f\x5f\x66\x6d\x74\0\x72\x6f\x70\x74\x73\0\x2e\x62\
\x73\x73\0\x2e\x6d\x61\x70\x73\0\x2e\x72\x65\x6c\x75\x70\x72\x6f\x62\x65\x2f\
\x2f\x70\x72\x6f\x63\x2f\x73\x65\x6c\x66\x2f\x65\x78\x65\x3a\x73\x65\x74\x5f\
\x74\x63\x70\x5f\x72\x65\x77\x72\x69\x74\x65\x72\x5f\x6f\x70\x74\x69\x6f\x6e\
\x73\0\x74\x63\x70\x5f\x72\x65\x77\x72\x69\x74\x65\x72\0\x2e\x72\x65\x6c\x78\
\x64\x70\0\x72\x69\x6e\x67\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\
\x67\0\x65\x78\x63\x68\x61\x6e\x67\x65\x5f\x62\x75\x66\0\x5f\x6c\x69\x63\x65\
\x6e\x73\x65\0\x73\x65\x74\x5f\x74\x63\x70\x5f\x72\x65\x77\x72\x69\x74\x65\x72\
\x5f\x6f\x70\x74\x69\x6f\x6e\x73\x5f\x75\x70\x72\x6f\x62\x65\0\x2e\x73\x74\x72\
\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\
\x72\x65\x6c\x2e\x42\x54\x46\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\xca\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xaf\x18\0\0\
\0\0\0\0\xeb\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3d\0\0\0\x01\0\0\
\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x20\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x39\0\0\0\x09\0\0\0\x40\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x48\x15\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x10\0\0\0\x03\0\0\
\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x7d\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x60\x01\0\0\0\0\0\0\x78\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x79\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x58\x15\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x10\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\x2e\0\0\0\x08\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd8\
\x02\0\0\0\0\0\0\x0c\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\xda\0\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd8\x02\0\0\0\0\
\0\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa2\0\
\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe5\x02\0\0\0\0\0\0\x04\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x33\0\0\0\x01\0\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x02\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe6\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\0\x1e\x0e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe2\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x88\x15\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\x10\0\0\0\x0b\0\0\0\x08\0\0\0\0\0\0\
\0\x10\0\0\0\0\0\0\0\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\
\x11\0\0\0\0\0\0\x1c\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x07\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd8\x15\0\0\0\0\
\0\0\xd0\x02\0\0\0\0\0\0\x10\0\0\0\x0d\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\x86\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\xa8\x18\0\0\0\0\
\0\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd2\0\
\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\x14\0\0\0\0\0\0\x08\x01\0\0\
\0\0\0\0\x01\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct net_ebpf *net_ebpf::open(const struct bpf_object_open_opts *opts) { return net_ebpf__open_opts(opts); }
struct net_ebpf *net_ebpf::open_and_load() { return net_ebpf__open_and_load(); }
int net_ebpf::load(struct net_ebpf *skel) { return net_ebpf__load(skel); }
int net_ebpf::attach(struct net_ebpf *skel) { return net_ebpf__attach(skel); }
void net_ebpf::detach(struct net_ebpf *skel) { net_ebpf__detach(skel); }
void net_ebpf::destroy(struct net_ebpf *skel) { net_ebpf__destroy(skel); }
const void *net_ebpf::elf_bytes(size_t *sz) { return net_ebpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
net_ebpf__assert(struct net_ebpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
	_Static_assert(sizeof(s->bss->ropts) == 12, "unexpected size of 'ropts'");
	_Static_assert(sizeof(s->bss->exchange_buf) == 1024, "unexpected size of 'exchange_buf'");
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __NET_EBPF_SKEL_H__ */
